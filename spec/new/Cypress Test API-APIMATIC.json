{
  "openapi": "3.1.0",
  "info": {
    "title": "Cypress Test API",
    "description": "This is a sample API to demonstrate an sOpenAPI spec with multiple endpoints and a custom model.",
    "contact": {},
    "version": "1.0.0"
  },
  "jsonSchemaDialect": "https://json-schema.org/draft/2020-12/schema",
  "servers": [
    {
      "url": "https://{defaultHost}",
      "variables": {
        "defaultHost": {
          "default": "www.example.com"
        }
      }
    }
  ],
  "paths": {
    "/items/{status}": {
      "post": {
        "summary": "Create an item",
        "description": "Creates a new resource in the system.\n",
        "operationId": "Createanitem",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "The status of the items to filter by.",
            "required": true,
            "style": "simple",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/status1"
                },
                {
                  "description": "The status of the items to filter by."
                }
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Custom model with additional properties",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Item"
                  },
                  {
                    "description": "Custom model with additional properties"
                  }
                ],
                "contentMediaType": "application/json",
               
              }
            }
          },
          "required": false
        },
        "responses": {        
          "200": {
            "description": "Example response",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                },
                "examples": {
                  "client_mac": {
                    "value": {
                      "match": "client_mac",
                      "name": "cameras",
                      "type": "match",
                      "values": [
                        "010203040506",
                        "abcdef*"
                      ]
                    }
                  },
                  "egress_vlan_names": {
                    "value": {
                      "egress_vlan_names": [
                        "1vlan-30",
                        "1vlan-20",
                        "2vlan10"
                      ],
                      "name": "trunk_ap",
                      "type": "egress_vlan_names"
                    }
                  },
                  "matches_cert_cn": {
                    "value": {
                      "match": "cert_cn",
                      "name": "staff",
                      "type": "match",
                      "values": [
                        "john",
                        "staff*"
                      ]
                    }
                  },
                  "matches_cert_issuer": {
                    "value": {
                      "match": "cert_issuer",
                      "name": "issuer1",
                      "type": "match",
                      "values": [
                        "/C=CN/ST=defy/L=defy/O=defy/OU=defy/CN=defy"
                      ]
                    }
                  },
                  "matches_cert_san": {
                    "value": {
                      "match": "cert_san",
                      "name": "san1",
                      "type": "match",
                      "values": [
                        "henry1@defy.com"
                      ]
                    }
                  },
                  "matches_cert_serial": {
                    "value": {
                      "match": "cert_serial",
                      "name": "serial1",
                      "type": "match",
                      "values": [
                        "6a524ab782fb468c00c59f51cff00268d95533b8"
                      ]
                    }
                  },
                  "matches_cert_sub": {
                    "value": {
                      "match": "cert_sub",
                      "name": "subject1",
                      "type": "match",
                      "values": [
                        "/C=CN/ST=defy/O=defy/OU=defy/CN=steve"
                      ]
                    }
                  },
                  "matches_radius_group": {
                    "value": {
                      "name": "VIP_group",
                      "radius_group": "VIP",
                      "type": "radius_group"
                    }
                  },
                  "matches_realm": {
                    "value": {
                      "match": "realm",
                      "name": "defy",
                      "type": "match",
                      "values": [
                        "defy.com"
                      ]
                    }
                  },
                  "matches_role": {
                    "value": {
                      "match": "idp_role",
                      "name": "VIP",
                      "type": "match",
                      "values": [
                        "vip"
                      ]
                    }
                  },
                  "matches_username": {
                    "value": {
                      "match": "user_name",
                      "name": "admins",
                      "type": "match",
                      "values": [
                        "bob",
                        "steve"
                      ]
                    }
                  },
                  "matches_vlan": {
                    "value": {
                      "name": "guest_vlan",
                      "type": "vlan",
                      "vlan": "30"
                    }
                  },
                  "radius_attrs": {
                    "value": {
                      "name": "custom_attrs",
                      "radius_attrs": [
                        "Idle-Timeout=600",
                        "Termination-Action=RADIUS-Request"
                      ],
                      "type": "radius_attrs"
                    }
                  },
                  "radius_vendor_attrs": {
                    "value": {
                      "name": "custom_radius_vendor_attrs",
                      "radius_vendor_attrs": [
                        "PaloAlto-Admin-Role=superuser",
                        "PaloAlto-Panorama-Admin-Role=administrator"
                      ],
                      "type": "radius_vendor_attrs"
                    }
                  },
                  "session_timeout": {
                    "value": {
                      "name": "timeout",
                      "session_timeout": 86400,
                      "type": "session_timeout"
                    }
                  },
                  "username_attr": {
                    "value": {
                      "allow_usermac_override": true,
                      "name": "username_attr",
                      "type": "username_attr",
                      "username_attr": "automatic"
                    }
                  }
                }
              }
            }
          },
            "400": {
              "description": "Bad Syntax",
              "headers": {},
              "content": {
                "application/json": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Status"
                      },
                      {
                        "examples": [
                          {
                            "detail": "JSON parse error - Expecting value: line 5 column 8 (char 56)"
                          }
                        ]
                      }
                    ]
                  },
                  "contentMediaType": "application/json",
                  "examples": {
                    "Example": {
                      "value": {
                        "detail": "JSON parse error - Expecting value: line 5 column 8 (char 56)"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "headers": {},
              "content": {
                "application/json": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Status"
                      },
                      {
                        "examples": [
                          {
                            "detail": "Authentication credentials were not provided."
                          }
                        ]
                      }
                    ]
                  },
                  "contentMediaType": "application/json",
                  "examples": {
                    "Example": {
                      "value": {
                        "detail": "Authentication credentials were not provided."
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Permission Denied",
              "headers": {},
              "content": {
                "application/json": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Status"
                      },
                      {
                        "examples": [
                          {
                            "detail": "You do not have permission to perform this action."
                          }
                        ]
                      }
                    ]
                  },
                  "contentMediaType": "application/json",
                  "examples": {
                    "Example": {
                      "value": {
                        "detail": "You do not have permission to perform this action."
                      }
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "<response><message>This is an XML response</message></response>"
                      }
                    }
                  }
                },
                "text/html": {
                  "schema": {
                    "type": "string",
                    "example": "<html><body><p>This is an HTML response</p></body></html>"
                  }
                }
              }
            }     
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/items/{id}": {
      "get": {
        "summary": "Get an item by ID",
        "description": "",
        "operationId": "GetanitembyID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the item to retrieve",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The value of the item to retrieve",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item retrieved successfully",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/tokens": {
      "post": {
        "summary": "Create OAuth Token",
        "description": "Generates a new OAuth token with the specified scopes.",
        "operationId": "CreateOAuthToken",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokensRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "OAuth token created successfully",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/multiple-arrays": {
      "post": {
        "summary": "Test Endpoint with Arrays",
        "description": "This endpoint accepts a complex structure with multiple arrays.",
        "operationId": "TestEndpointwithArrays",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipleArraysRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Request processed successfully",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    }

  },

  "components": {
    "schemas": {
      "Item": {
        "title": "Item",
        "required": [
          "id",
          "name",
          "date",
          "dateTime",
          "decimal",
          "long",
          "bool",
          "CustomEnum",
          "jsonObject",
          "Animal",
          "Map"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "contentEncoding": "uuid",
            "examples": [
              "550e8400-e29b-41d4-a716-446655440000"
            ]
          },
          "name": {
            "type": "string",
            "examples": [
              "John Doe"
            ]
          },
          "date": {
            "type": "string",
            "contentEncoding": "date",
            "examples": [
              "2024-05-24"
            ]
          },
          "dateTime": {
            "type": "string",
            "contentEncoding": "date-time",
            "examples": [
              "2024-05-24T12:00:00Z"
            ]
          },
          "decimal": {
            "type": "number",
            "examples": [
              1234.56
            ]
          },
          "long": {
            "type": "integer",
            "contentEncoding": "int64",
            "examples": [
              1234567890123
            ]
          },
          "bool": {
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "CustomEnum": {
            "$ref": "#/components/schemas/CustomEnum"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              },
              {
                "examples": [
                  "pending"
                ]
              }
            ]
          },
          "jsonObject": {
            "type": "object",
            "description": "A generic JSON object"
          },
          "Animal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OneOfLionDeerType"
              },
              {
                "description": "OneOf (Lion, Deer) with \"type\" discriminator of mapping (hunter:Lion, Hunted:Deer)"
              }
            ]
          },
          "Map": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Message"
            }
          }    
        },
        "additionalProperties": {
          "type": "string",
          "description": "Additional properties for the schema"
      }
      },
      "ItemResponse": {
        "title": "ItemResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CustomEnum": {
        "title": "CustomEnum",
        "enum": [
          "VALUE1",
          "VALUE2",
          "VALUE3"
        ],
        "type": "string"
      },
      "Lion": {
        "title": "Lion",
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Deer": {
        "title": "Deer",
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      
      },
      "Message": {
        "title": "Message",
        "required": [
          "code",
          "text"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "contentEncoding": "int32"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "Message2": {
        "title": "Message2",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "contentEncoding": "int32"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "MultipleArraysRequest": {
        "title": "MultipleArraysRequest",
        "required": [
          "Array1"
        ],
        "type": "object",
        "properties": {
          "Array1": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array containing items of type string"
          },
          "Array2": {
            "type": "array",
            "items": {
              "type": "integer",
              "contentEncoding": "int32"
            },
            "description": "An array containing items of type integer"
          }
        }
      },
      "OAuthScopeOAuthACG": {
        "title": "OAuthScopeOAuthACG",
        "enum": [
          "file_requests.read",
          "zahra",
          "test1",
          "selection"
        ],
        "type": "string",
        "description": "OAuth 2 scopes supported by the API"
      },
      "Status": {
        "title": "Status",
        "enum": [
          "active",
          "inactive",
          "pending"
        ],
        "type": "string",
        "examples": [
          "pending"
        ]
      },
      "status1": {
        "title": "status1",
        "enum": [
          "enumvalue1",
          "enumvalue2",
          "enumvalue3"
        ],
        "type": "string"
      },
      "TokensRequest": {
        "title": "TokensRequest",
        "required": [
          "scopes"
        ],
        "type": "object",
        "properties": {
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthScopeOAuthACG"
            },
            "description": "List of scopes that apply to the OAuth token"
          }
        }
      },
      "OneOfLionDeerType": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Lion"
          },
          {
            "$ref": "#/components/schemas/Deer"
          }
        ],
        "description": "OneOf (Lion, Deer) with \"type\" discriminator of mapping (hunter:Lion, Hunted:Deer)",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "hunter": "Lion",
            "Hunted": "Deer"
          }
        }
      },
      "nac_tag": {
        "title": "nac_tag",
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "allow_usermac_override": {
            "type": "boolean",
            "description": "can be set to true to allow the override by usermac result",
            "default": false
          },
          "created_time": {
            "type": "number",
            "readOnly": true
          },
          "egress_vlan_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "if `type`==`egress_vlan_names`, list of egress vlans to return",
            "example": [
              "1vlan-30",
              "1vlan-20",
              "2-vlan10"
            ]
          },
          "gbp_tag": {
            "type": "integer",
            "description": "if `type`==`gbp_tag`",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "match": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nac_tag"
              },
              {
                "minLength": 1
              }
            ]
          },
          "match_all": {
            "type": "boolean",
            "description": "This field is applicable only when `type`==`match`\n  * `false`: means it is sufficient to match any of the values (i.e., match-any behavior)\n  * `true`: means all values should be matched (i.e., match-all behavior)\n\n\nCurrently it makes sense to set this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'",
            "default": false
          },
          "modified_time": {
            "type": "number",
            "readOnly": true
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "a97c1b22-a4e9-411e-9bfd-d8695a0f9e61"
          },
          "radius_attrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field \"radius_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_attrs in the result of a given rule.",
            "example": [
              "Idle-Timeout=600",
              "Termination-Action=RADIUS-Request"
            ]
          },
          "radius_group": {
            "type": "string",
            "description": "if `type`==`radius_group`"
          },
          "radius_vendor_attrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field \"radius_vendor_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.",
            "example": [
              "PaloAlto-Admin-Role=superuser",
              "PaloAlto-Panorama-Admin-Role=administrator"
            ]
          },
          "session_timeout": {
            "type": "integer",
            "description": "if `type`==`session_timeout, in seconds",
            "format": "int32",
            "example": 86000
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nac_tag"
              },
              {
                "minLength": 1
              }
            ]
          },
          "username_attr": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nac_tag"
              },
              {}
            ]
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "if `type`==`match`"
          },
          "vlan": {
            "type": "string",
            "description": "if `type`==`vlan`"
          }
        }
      },
      "response_http400": {
        "title": "response_http400",
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "example": "JSON parse error - Expecting value: line 5 column 8 (char 56)"
          }
        }
      },
      "response_http404": {
        "title": "response_http404",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": []
}
